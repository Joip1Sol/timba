{"version":3,"sources":["Wheel.tsx","Global.tsx","Chip.tsx","ChipComponent.tsx","Board.tsx","ProgressBar.tsx","RouletteWrapper.tsx","index.tsx"],"names":["Wheel","props","singleRotationDegree","lastNumber","rouletteWheelNumbers","rouletteData","numbers","console","log","number","getRotationFromNumber","index","indexOf","parseInt","getRouletteIndexFromNumber","spinWheel","bezier","totalRotaiton","minNumberOfSpins","maxNumberOfSpins","currentNumber","lastNumberRotation","toString","endRotation","rotateTo","anime","random","getRandomEndRotation","zeroFromEndRotation","Math","abs","ballEndRotation","zeroEndRotation","getBallEndRotation","set","rotate","targets","duration","easing","join","complete","anim","translateY","value","loop","useEffect","nextNubmer","next","className","style","transform","ValueType","GameStages","classNames","require","Chip","chip","currentItemChips","currentItem","randomNumber","min","max","undefined","total","chipData","chipsImgs","currentChipPlaced","sum","currentChip","totalSum","calc","leftMin","leftMax","topMin","topMax","i","key","type","top","left","push","chipValueImage","ChipComponent","tdKey","cellClass","chipKey","cell","rowSpan","colSpan","onClick","e","onCellClick","React","memo","Board","Component","constructor","super","other_1_12","NUMBERS_1_12","valueSplit","other_2_12","NUMBERS_2_12","other_3_12","NUMBERS_3_12","other_1_18","NUMBERS_1_18","other_19_36","NUMBERS_19_36","other_even","EVEN","other_odd","ODD","other_red","RED","other_black","BLACK","totalNumbers","rouletteWheenNumbers","getRouletteColor","this","item","bind","getNumbersList","getCellItemFromCellItemType","getClassNamesFromCellItemType","isEvenOdd","validNumber","NUMBER","DOUBLE_SPLIT","QUAD_SPLIT","TRIPLE_SPLIT","EMPTY","colList","rowList","startNumberSub","nextStartNumberSub","prevStartNumberSub","j","leftNumber","topNumber","bottomNumber","rightNumber","bottomLeftNumber","bottomRightNumber","render","currentItemChips_1_12","chipsData","placedChips","get","currentItemChips_2_12","currentItemChips_3_12","currentItemChips_1_18","currentItemChips_even","currentItemChips_red","currentItemChips_black","currentItemChips_odd","currentItemChips_19_36","map","keyId","cellIndex","chipKeyValue","ProgressBarRound","stage","maxDuration","currentDuration","autoplay","PLACE_BET","WINNERS","RouletteWrapper","timer","Timer","numberRef","createRef","state","selectedChip","Map","winners","history","NONE","username","WebApp","initDataUnsafe","user","endTime","progressCountdown","time_remaining","socketServer","animateProgress","blackNumbers","onSpinClick","onChipClick","getChipClasses","placeBet","clearBet","io","process","REACT_APP_SERVER_URL","componentDidMount","open","on","data","gameData","JSON","parse","setGameData","emit","ready","document","body","backgroundColor","classList","add","colorScheme","expand","componentWillUnmount","close","NO_MORE_BETS","nextNumber","setState","wins","length","currentChips","chipValue","chip_selected","current","placedChipsMap","chips","Array","from","keys","chipsPlaced","stringify","entry","includes","ProgressBar","Button","variant","gradient","to","deg","size","disabled","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ef0c3ce3.chunk.js","sourcesContent":["import anime from \"animejs\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { rouletteData, WheelNumber } from \"./Global\";\r\n\r\n\r\nconst Wheel = ( props : {rouletteData : rouletteData, number: WheelNumber}) : JSX.Element => {\r\n  var totalNumbers = 37;\r\n  var singleSpinDuration = 5000;\r\n  var singleRotationDegree = 360 / totalNumbers;\r\n  var lastNumber = 0;\r\n\r\n  var rouletteWheelNumbers = props.rouletteData.numbers;\r\n  console.log(props.rouletteData);\r\n  console.log(props.number);\r\n  const getRouletteIndexFromNumber = (number: string) => {\r\n    return rouletteWheelNumbers.indexOf(parseInt(number));\r\n  };\r\n  const nextNumber = (number: any) => {\r\n    var value = number;\r\n    return value;\r\n  };\r\n  const getRotationFromNumber = (number: string) => {\r\n    var index = getRouletteIndexFromNumber(number);\r\n    return singleRotationDegree * index;\r\n  };\r\n\r\n  // rotateTo randomizes the end outcome of the wheel\r\n  // so it doesn't only end at 0 at the top\r\n  const getRandomEndRotation = (minNumberOfSpins: number, maxNumberOfSpins: number) => {\r\n    var rotateTo = anime.random(\r\n      minNumberOfSpins * totalNumbers,\r\n      maxNumberOfSpins * totalNumbers\r\n    );\r\n\r\n    return singleRotationDegree * rotateTo;\r\n  };\r\n  // calculating where the zero will be at the end of the spin\r\n  // because we are spinning it counter clockwise we are substracting it of 360\r\n  const getZeroEndRotation = (totalRotaiton: number) => {\r\n    var rotation = 360 - Math.abs(totalRotaiton % 360);\r\n\r\n    return rotation;\r\n  };\r\n  // Where the ball end position should be\r\n  // we are calculating this based on the zero rotation\r\n  // and how much the wheel spins\r\n  const getBallEndRotation = (zeroEndRotation: number, currentNumber: any) => {\r\n    return Math.abs(zeroEndRotation) + getRotationFromNumber(currentNumber);\r\n  };\r\n  // randomizing the number of spins that the ball should make\r\n  // so every spin is different\r\n  const getBallNumberOfRotations = (minNumberOfSpins: number, maxNumberOfSpins: number) => {\r\n    var numberOfSpins = anime.random(minNumberOfSpins, maxNumberOfSpins);\r\n    return 360 * numberOfSpins;\r\n  };\r\n\r\n  function spinWheel(number: number) {\r\n    const bezier = [0.165, 0.84, 0.44, 1.005];\r\n    var ballMinNumberOfSpins = 2;\r\n    var ballMaxNumberOfSpins = 4;\r\n    var wheelMinNumberOfSpins = 2;\r\n    var wheelMaxNumberOfSpins = 4;\r\n\r\n    var currentNumber = nextNumber(number);\r\n\r\n    var lastNumberRotation = getRotationFromNumber(lastNumber.toString()); //anime.get(wheel, \"rotate\", \"deg\");\r\n\r\n    // minus in front to reverse it so it spins counterclockwise\r\n    var endRotation = -getRandomEndRotation(\r\n      ballMinNumberOfSpins,\r\n      ballMaxNumberOfSpins\r\n    );\r\n    var zeroFromEndRotation = getZeroEndRotation(endRotation);\r\n    var ballEndRotation =\r\n      getBallNumberOfRotations(wheelMinNumberOfSpins, wheelMaxNumberOfSpins) +\r\n      getBallEndRotation(zeroFromEndRotation, currentNumber);\r\n\r\n    // reset to the last number\r\n    anime.set([\".layer-2\", \".layer-4\"], {\r\n      rotate: function () {\r\n        return lastNumberRotation;\r\n      }\r\n    });\r\n    // reset zero\r\n    anime.set(\".ball-container\", {\r\n      rotate: function () {\r\n        return 0;\r\n      }\r\n    });\r\n\r\n    anime({\r\n      targets: [\".layer-2\", \".layer-4\"],\r\n      rotate: function () {\r\n        return endRotation; // random number\r\n      },\r\n      duration: singleSpinDuration, // random duration\r\n      easing: `cubicBezier(${bezier.join(\",\")})`,\r\n      complete: function (anim: any) {\r\n        lastNumber = currentNumber;\r\n      }\r\n    });\r\n    // aniamte ball\r\n    anime({\r\n      targets: \".ball-container\",\r\n      translateY: [\r\n        { value: 0, duration: 2000 },\r\n        { value: 20, duration: 1000 },\r\n        { value: 25, duration: 900 },\r\n        { value: 50, duration: 1000 }\r\n      ],\r\n      rotate: [{ value: ballEndRotation, duration: singleSpinDuration }],\r\n      loop: 1,\r\n      easing: `cubicBezier(${bezier.join(\",\")})`\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    var nextNubmer = props.number.next;\r\n    if (nextNubmer != null && nextNubmer !== \"\") {\r\n      var nextNumberInt = parseInt(nextNubmer);\r\n      spinWheel(nextNumberInt);\r\n    }\r\n  }, [props.number]);\r\n\r\n  return (\r\n    <div className={\"roulette-wheel\"}>\r\n      <div\r\n        className={\"layer-2 wheel\"}\r\n        style={{ transform: \"rotate(0deg)\" }}\r\n      ></div>\r\n      <div className={\"layer-3\"}></div>\r\n      <div\r\n        className={\"layer-4 wheel\"}\r\n        style={{ transform: \"rotate(0deg)\" }}\r\n      ></div>\r\n      <div className={\"layer-5\"}></div>\r\n      <div className={\"ball-container\"} style={{ transform: \"rotate(0deg)\" }}>\r\n        <div\r\n          className={\"ball\"}\r\n          style={{ transform: \"translate(0, -163.221px)\" }}\r\n        ></div>\r\n      </div>\r\n      {/* <svg width=\"380\" height=\"380\">\r\n        <circle cx=\"190\" cy=\"190\" r=\"190\" style={{touch-action: 'none'}}></circle>\r\n      </svg> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wheel;\r\n","export enum ValueType {\r\n  NUMBER,\r\n  NUMBERS_1_12,\r\n  NUMBERS_2_12,\r\n  NUMBERS_3_12,\r\n  NUMBERS_1_18,\r\n  NUMBERS_19_36,\r\n  EVEN,\r\n  ODD,\r\n  RED,\r\n  BLACK,\r\n  DOUBLE_SPLIT,\r\n  QUAD_SPLIT,\r\n  TRIPLE_SPLIT,\r\n  EMPTY\r\n}\r\n\r\n\r\nexport interface Item {\r\n  type: ValueType;\r\n  value?: number;\r\n  valueSplit: number[];\r\n}\r\n\r\n\r\nexport interface PlacedChip {\r\n  item: Item;\r\n  sum: number;\r\n}\r\nexport type rouletteData = {\r\n  numbers: number[];\r\n};\r\nexport type RouletteWrapperState = {\r\n  rouletteData: rouletteData;\r\n  number: WheelNumber;\r\n  chipsData: ChipsData;\r\n  winners: Winner[],\r\n  username: string;\r\n  endTime: number;\r\n  progressCountdown: number;\r\n  time_remaining: number;\r\n  stage: GameStages;\r\n  history: number[]\r\n};\r\nexport type Winner = {\r\n  username: string;\r\n  sum: number;\r\n}\r\nexport type ChipsData = {\r\n  selectedChip: any;\r\n  placedChips: any;\r\n};\r\n\r\nexport type WheelNumber = {\r\n  next: any;\r\n};\r\n\r\nexport enum GameStages {\r\n  PLACE_BET,\r\n  NO_MORE_BETS,\r\n  WINNERS,\r\n  NONE\r\n}\r\nexport type GameData = {\r\n  stage: GameStages,\r\n  time_remaining: number;\r\n  value: number;\r\n  wins: Winner[],\r\n  history: number[]\r\n}\r\n","import React from \"react\";\r\n\r\nvar classNames = require(\"classnames\");\r\n\r\nlet Chip = function (props: { currentItemChips: any; currentItem: any; leftMin: number | undefined; leftMax: number | undefined; topMin: number | undefined; topMax: number | undefined; }) : JSX.Element  {\r\n  var currentItemChips = props.currentItemChips;\r\n  var currentItem = props.currentItem;\r\n  function randomNumber(min: number, max: number) {\r\n    return Math.random() * (max - min) + min;\r\n  }\r\n  //console.log(chipsData);\r\n  function getChipClasses(chip: number) {\r\n    var cellClass = classNames({\r\n      \"chip-100-placed\": chip === 100,\r\n      \"chip-20-placed\": chip === 20,\r\n      \"chip-10-placed\": chip === 10,\r\n      \"chip-5-placed\": chip === 5,\r\n      chipValueImage: true\r\n    });\r\n\r\n    return cellClass;\r\n  }\r\n\r\n\r\n  if (currentItemChips !== undefined) {\r\n    var total = 0;\r\n    var chipData = currentItemChips;\r\n    const chipsImgs = [];\r\n    var currentChipPlaced = 0;\r\n    while (total < chipData.sum) {\r\n      var currentChip = 100;\r\n      var totalSum = chipData.sum - total\r\n      if (totalSum >= 100) {\r\n        currentChip = 100;\r\n        var calc = totalSum - (totalSum % currentChip);\r\n        total += calc;\r\n        currentChipPlaced = calc / currentChip;\r\n      } else if (totalSum >= 20) {\r\n        currentChip = 20;\r\n        var calc = totalSum - (totalSum % currentChip);\r\n        total += calc;\r\n        currentChipPlaced = calc / currentChip;\r\n      } else if (totalSum >= 10) {\r\n        currentChip = 10;\r\n        var calc = totalSum - (totalSum % currentChip);\r\n        total += calc;\r\n        currentChipPlaced = calc / currentChip;\r\n      } else {\r\n        currentChip = 5;\r\n        var calc = totalSum - (totalSum % currentChip);\r\n        total += calc;\r\n        currentChipPlaced = calc / currentChip;\r\n      }\r\n      var leftMin = -10;\r\n      if (props.leftMin !== undefined) {\r\n        leftMin = props.leftMin;\r\n      }\r\n      var leftMax = 10;\r\n      if (props.leftMax !== undefined) {\r\n        leftMax = props.leftMax;\r\n      }\r\n      var topMin = -30;\r\n      if (props.topMin !== undefined) {\r\n        topMin = props.topMin;\r\n      }\r\n      var topMax = 0;\r\n      if (props.topMax !== undefined) {\r\n        topMax = props.topMax;\r\n      }\r\n\r\n      for (let i = 0; i < currentChipPlaced; i++) {\r\n        var key =\r\n          currentItem.type +\r\n          \"_\" +\r\n          currentItem.value +\r\n          \"_\" +\r\n          currentChip +\r\n          \"_\" +\r\n          i;\r\n        //console.log(key);\r\n        let style = {\r\n          top: \"0px\",\r\n          left: \"0px\"\r\n        };\r\n        style.left = randomNumber(leftMin, leftMax)+\"px\";\r\n        style.top = randomNumber(topMin, topMax)+\"px\";\r\n        chipsImgs.push(\r\n          <div\r\n            key={key}\r\n            style={style}\r\n            className={getChipClasses(currentChip)}\r\n          ></div>\r\n        );\r\n      }\r\n    }\r\n    return <div className={\"chipValue\"}>{chipsImgs}</div>;\r\n  } else {\r\n    return <></>;\r\n  }\r\n};\r\n\r\nexport default Chip;\r\n","import React from \"react\";\r\nimport Chip from \"./Chip\";\r\nfunction ChipComponent(props: { currentItemChips: any; tdKey: any; cellClass: any; chipKey: any; cell: any; leftMin: number | undefined; leftMax: number | undefined; topMin: number | undefined; topMax: number | undefined; rowSpan: number | undefined; colSpan: number | undefined; onCellClick: (arg0: any) => void; }) {\r\n  console.log(\"Child Render\");\r\n\r\n  var currentItemChips = props.currentItemChips;\r\n  var tdKey = props.tdKey;\r\n  var cellClass = props.cellClass;\r\n  var chipKey = props.chipKey;\r\n  var cell = props.cell;\r\n\r\n  var sum = \"\";\r\n  if (currentItemChips !== undefined) {\r\n    if (currentItemChips.sum !== 0) {\r\n      sum = currentItemChips.sum;\r\n    }\r\n  }\r\n\r\n  var left = 0;\r\n  var top = -15;\r\n\r\n  if (props.leftMin !== undefined && props.leftMax !== undefined) {\r\n    left = props.leftMin + (props.leftMax - props.leftMin) / 2;\r\n  }\r\n\r\n  if (props.topMin !== undefined && props.topMax !== undefined) {\r\n    top = props.topMin + (props.topMax - props.topMin) / 2;\r\n  }\r\n  let style = {\r\n    top: top + \"px\",\r\n    left: left + \"px\"\r\n  };\r\n\r\n  return (\r\n    <td\r\n      key={tdKey}\r\n      className={cellClass}\r\n      rowSpan={props.rowSpan}\r\n      colSpan={props.colSpan}\r\n      onClick={(e) => {\r\n        console.log(\"click\");\r\n        props.onCellClick(cell);\r\n      }}\r\n    >\r\n      <Chip\r\n        leftMin={props.leftMin}\r\n        leftMax={props.leftMax}\r\n        topMin={props.topMin}\r\n        topMax={props.topMax}\r\n        key={chipKey}\r\n        currentItemChips={currentItemChips}\r\n        currentItem={cell}\r\n      />\r\n      <div className={\"chipValue\"}>\r\n        <div style={style} className={\"chipSum\"}>\r\n          {sum}\r\n        </div>\r\n      </div>\r\n    </td>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport default React.memo(ChipComponent);\r\n","import React from \"react\";\r\nimport { ValueType, Item } from \"./Global\";\r\nimport Chip from \"./Chip\";\r\nimport ChipComponent from \"./ChipComponent\";\r\nvar classNames = require(\"classnames\");\r\n\r\nclass Board extends React.Component<any, any> {\r\n  numbers: Item[][];\r\n  other_1_12: Item = { type: ValueType.NUMBERS_1_12, valueSplit: [] };\r\n  other_2_12: Item = { type: ValueType.NUMBERS_2_12, valueSplit: [] };\r\n  other_3_12: Item = { type: ValueType.NUMBERS_3_12, valueSplit: [] };\r\n  other_1_18: Item = { type: ValueType.NUMBERS_1_18, valueSplit: [] };\r\n  other_19_36: Item = { type: ValueType.NUMBERS_19_36, valueSplit: [] };\r\n  other_even: Item = { type: ValueType.EVEN, valueSplit: [] };\r\n  other_odd: Item = { type: ValueType.ODD, valueSplit: [] };\r\n  other_red: Item = { type: ValueType.RED, valueSplit: [] };\r\n  other_black: Item = { type: ValueType.BLACK, valueSplit: [] };\r\n  totalNumbers = 37;\r\n  rouletteWheenNumbers: number[];\r\n\r\n  constructor(props: { rouletteData: { numbers: number[]; }; }) {\r\n    super(props);\r\n    this.onCellClick = this.onCellClick.bind(this);\r\n\r\n    this.numbers = this.getNumbersList();\r\n    this.rouletteWheenNumbers = props.rouletteData.numbers;\r\n  }\r\n\r\n  getRouletteColor = (number: number | undefined | null): string => {\r\n    if (number === undefined || number === null) return \"none\";\r\n    var index = this.rouletteWheenNumbers.indexOf(number);\r\n    const i =\r\n      index >= 0\r\n        ? index % this.totalNumbers\r\n        : this.totalNumbers - Math.abs(index % this.totalNumbers);\r\n    return i === 0 ? \"none\" : i % 2 === 0 ? \"black\" : \"red\";\r\n  };\r\n\r\n  getCellItemFromCellItemType(type: any) {}\r\n  getClassNamesFromCellItemType(type: ValueType, number: number | undefined | null) {\r\n    var isEvenOdd = 0;\r\n    const validNumber = number !== null && number !== undefined;\r\n\r\n    if (validNumber && type === ValueType.NUMBER && number !== 0) {\r\n      if (number % 2 === 0) {\r\n        isEvenOdd = 1;\r\n      } else {\r\n        isEvenOdd = 2;\r\n      }\r\n    }\r\n\r\n    let numberValue = \"value-\" + number;\r\n    var cellClass = classNames({\r\n      \"board-cell-number\": type === ValueType.NUMBER,\r\n      \"board-cell-double-split\": type === ValueType.DOUBLE_SPLIT,\r\n      \"board-cell-quad-split\": type === ValueType.QUAD_SPLIT,\r\n      \"board-cell-triple-split\": type === ValueType.TRIPLE_SPLIT,\r\n      \"board-cell-empty\": type === ValueType.EMPTY,\r\n      \"board-cell-even\": type === ValueType.EVEN || isEvenOdd === 1,\r\n      \"board-cell-odd\": type === ValueType.ODD || isEvenOdd === 2,\r\n      \"board-cell-number-1-18\":\r\n        type === ValueType.NUMBERS_1_18 ||\r\n        (validNumber && number >= 1 && number <= 18 && type === ValueType.NUMBER),\r\n      \"board-cell-number-19-36\":\r\n        type === ValueType.NUMBERS_19_36 ||\r\n        (validNumber && number >= 19 && number <= 36 && type === ValueType.NUMBER),\r\n      \"board-cell-number-1-12\":\r\n        type === ValueType.NUMBERS_1_12 ||\r\n        (validNumber && number % 3 === 0 && type === ValueType.NUMBER && number !== 0),\r\n      \"board-cell-number-2-12\":\r\n        type === ValueType.NUMBERS_2_12 ||\r\n        (validNumber && number % 3 === 2 && type === ValueType.NUMBER),\r\n      \"board-cell-number-3-12\":\r\n        type === ValueType.NUMBERS_3_12 ||\r\n        (validNumber && number % 3 === 1 && type === ValueType.NUMBER),\r\n      \"board-cell-red\":\r\n        type === ValueType.RED ||\r\n        (validNumber && this.getRouletteColor(number) === \"red\" && type === ValueType.NUMBER),\r\n      \"board-cell-black\":\r\n        type === ValueType.BLACK ||\r\n        (validNumber && this.getRouletteColor(number) === \"black\" && type === ValueType.NUMBER)\r\n    });\r\n\r\n    return cellClass;\r\n  }\r\n  \r\n  getNumbersList() {\r\n\r\n    let colList: Array<Array<Item>> = [];\r\n    var difference = 3;\r\n\r\n    for (let i = 1; i <= 5; i++) {\r\n      let rowList: Array<Item> = [];\r\n      var startNumberSub = 0;\r\n      if (i === 3) {\r\n        startNumberSub = 1;\r\n      } else if (i == 5) {\r\n        startNumberSub = 2;\r\n      }\r\n\r\n      var nextStartNumberSub = 0;\r\n      if (i + 1 === 3) {\r\n        nextStartNumberSub = 1;\r\n      } else if (i + 1 === 5) {\r\n        nextStartNumberSub = 2;\r\n      }\r\n      var prevStartNumberSub = 0;\r\n      if (i - 1 === 3) {\r\n        prevStartNumberSub = 1;\r\n      } else if (i - 1 === 5) {\r\n        prevStartNumberSub = 2;\r\n      }\r\n      if (i === 1) {\r\n        const cell: Item = {\r\n          type: ValueType.NUMBER,\r\n          value: 0,\r\n          valueSplit: []\r\n        };\r\n        cell.type = ValueType.NUMBER;\r\n        cell.value = 0;\r\n\r\n        rowList.push(cell);\r\n      }\r\n      for (let j = 1; j <= 26; j++) {\r\n        const cell: Item = {\r\n          type: ValueType.EMPTY,\r\n          value: 0,\r\n          valueSplit: []\r\n        };\r\n\r\n        if (j > 24) {\r\n          cell.type = ValueType.EMPTY;\r\n          rowList.push(cell);\r\n          continue;\r\n        }\r\n        // 2, 4 mid splits\r\n        if (i % 2 === 0) {\r\n          if (j === 1) {\r\n            var leftNumber = 0;\r\n            var topNumber = difference - prevStartNumberSub;\r\n            var bottomNumber = difference - nextStartNumberSub;\r\n\r\n            cell.type = ValueType.TRIPLE_SPLIT;\r\n            cell.valueSplit = [leftNumber, topNumber, bottomNumber];\r\n            rowList.push(cell);\r\n          } else {\r\n            if (j % 2 === 0) {\r\n              var topNumber =\r\n                ((j - 2) / 2) * difference + difference - prevStartNumberSub;\r\n              var bottomNumber =\r\n                ((j - 2) / 2) * difference + difference - nextStartNumberSub;\r\n              cell.type = ValueType.DOUBLE_SPLIT;\r\n              cell.valueSplit = [topNumber, bottomNumber];\r\n              rowList.push(cell);\r\n            } else {\r\n              var leftNumber = ((j - 1) / 2) * difference - prevStartNumberSub;\r\n              var rightNumber = leftNumber + difference;\r\n              var bottomLeftNumber =\r\n                ((j - 1) / 2) * difference - nextStartNumberSub;\r\n              var bottomRightNumber = bottomLeftNumber + difference;\r\n              cell.type = ValueType.QUAD_SPLIT;\r\n              cell.valueSplit = [\r\n                leftNumber,\r\n                rightNumber,\r\n                bottomLeftNumber,\r\n                bottomRightNumber\r\n              ];\r\n              rowList.push(cell);\r\n            }\r\n          }\r\n        } else {\r\n          // 1, 3, 5 normal rows\r\n          if (j === 1) {\r\n            var leftNumber = 0;\r\n            var rightNumber = leftNumber + difference;\r\n            cell.type = ValueType.DOUBLE_SPLIT;\r\n            cell.valueSplit = [leftNumber, rightNumber];\r\n            rowList.push(cell);\r\n          } else {\r\n            if (j % 2 === 0) {\r\n              var currentNumber =\r\n                ((j - 2) / 2) * difference + difference - startNumberSub;\r\n              cell.type = ValueType.NUMBER;\r\n              cell.value = currentNumber;\r\n              rowList.push(cell);\r\n            } else {\r\n              var leftNumber = ((j - 1) / 2) * difference - startNumberSub;\r\n              var rightNumber = leftNumber + difference;\r\n              cell.type = ValueType.DOUBLE_SPLIT;\r\n              cell.valueSplit = [leftNumber, rightNumber];\r\n              rowList.push(cell);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      colList.push(rowList);\r\n    }\r\n    console.log(colList);\r\n    return colList;\r\n  }\r\n\r\n  onCellClick = (item: any) => {\r\n    this.props.onCellClick(item);\r\n  };\r\n\r\n  render() {\r\n    var currentItemChips_1_12 = this.props.chipsData.placedChips.get(\r\n      this.other_1_12\r\n    );\r\n    var currentItemChips_2_12 = this.props.chipsData.placedChips.get(\r\n      this.other_2_12\r\n    );\r\n    var currentItemChips_3_12 = this.props.chipsData.placedChips.get(\r\n      this.other_3_12\r\n    );\r\n    var currentItemChips_1_18 = this.props.chipsData.placedChips.get(\r\n      this.other_1_18\r\n    );\r\n    var currentItemChips_even = this.props.chipsData.placedChips.get(\r\n      this.other_even\r\n    );\r\n    var currentItemChips_red = this.props.chipsData.placedChips.get(\r\n      this.other_red\r\n    );\r\n    var currentItemChips_black = this.props.chipsData.placedChips.get(\r\n      this.other_black\r\n    );\r\n    var currentItemChips_odd = this.props.chipsData.placedChips.get(\r\n      this.other_odd\r\n    );\r\n    var currentItemChips_19_36 = this.props.chipsData.placedChips.get(\r\n      this.other_19_36\r\n    );\r\n\r\n    return (\r\n      <div className=\"roulette-board-wrapper hideElementsTest\">\r\n        <div className=\"roulette-board\">\r\n          <div className=\"roulette-board-grid-numbers\">\r\n            <table>\r\n              <tbody>\r\n                {this.numbers.map((item, index) => {\r\n                  console.log(this.numbers);\r\n                  var keyId = 0;\r\n                  return (\r\n                    <tr key={\"tr_board_\" + index}>\r\n                      {item.map((cell, cellIndex) => {\r\n                        var cellClass = this.getClassNamesFromCellItemType(\r\n                          cell.type,\r\n                          cell.value\r\n                        );\r\n                        if (\r\n                          cell.type === ValueType.NUMBER &&\r\n                          cell.value === 0\r\n                        ) {\r\n                          var tdKey = \"td_\" + cell.type + \"_\" + cell.value;\r\n                          var chipKey = \"chip_\" + cell.type + \"_\" + cell.value;\r\n\r\n                          var currentItemChips = this.props.chipsData.placedChips.get(\r\n                            cell\r\n                          );\r\n                          return (\r\n                            <ChipComponent\r\n                              currentItemChips={currentItemChips}\r\n                              tdKey={tdKey}\r\n                              chipKey={chipKey}\r\n                              cell={cell}\r\n                              cellClass={cellClass}\r\n                              rowSpan={5}\r\n                              colSpan={1}\r\n                              onCellClick={this.onCellClick} \r\n                              leftMin={undefined} \r\n                              leftMax={undefined} \r\n                              topMin={undefined} topMax={undefined}                            />\r\n                          );\r\n                        } else {\r\n                          var chipKeyValue = cell.value + \"\";\r\n                          if (cell.value === undefined) {\r\n                            var split = cell.valueSplit + \"\";\r\n                            chipKeyValue = \"split_\" + split;\r\n                          }\r\n                          var tdKey = \"td_\" + cell.type + \"_\" + chipKeyValue;\r\n                          var chipKey =\r\n                            \"chip_\" + cell.type + \"_\" + chipKeyValue;\r\n\r\n                          if (cell.type === ValueType.EMPTY) {\r\n                            keyId++;\r\n                            return (\r\n                              <td\r\n                                key={\"empty_\" + keyId}\r\n                                className={cellClass}\r\n                              ></td>\r\n                            );\r\n                          } else {\r\n                            var currentItemChips = this.props.chipsData.placedChips.get(\r\n                              cell\r\n                            );\r\n\r\n                            return (\r\n                              <ChipComponent\r\n                                currentItemChips={currentItemChips}\r\n                                tdKey={tdKey}\r\n                                chipKey={chipKey}\r\n                                cell={cell}\r\n                                rowSpan={1}\r\n                                colSpan={1}\r\n                                cellClass={cellClass}\r\n                                onCellClick={this.onCellClick} leftMin={undefined} leftMax={undefined} topMin={undefined} topMax={undefined}                              />\r\n                            );\r\n                          }\r\n                        }\r\n                      })}\r\n                    </tr>\r\n                  );\r\n                })}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n          <div className=\"roulette-board-grid-other\">\r\n            <table>\r\n              <tbody>\r\n                <tr>\r\n                  <td colSpan={2}></td>\r\n\r\n\r\n                  <ChipComponent\r\n                    currentItemChips={currentItemChips_1_12}\r\n                    tdKey={\"td_other_1_12\"}\r\n                    chipKey={\"chip_other_1_12\"}\r\n                    cell={this.other_1_12}\r\n                    rowSpan={1}\r\n                    colSpan={7}\r\n                    cellClass={this.getClassNamesFromCellItemType(\r\n                      ValueType.NUMBERS_1_12,\r\n                      null\r\n                    )}\r\n                    leftMin={70}\r\n                    leftMax={140}\r\n                    onCellClick={this.onCellClick} topMin={undefined} topMax={undefined}                  />\r\n\r\n\r\n                  <td></td>\r\n                  <ChipComponent\r\n                    currentItemChips={currentItemChips_2_12}\r\n                    tdKey={\"td_other_2_12\"}\r\n                    chipKey={\"chip_other_2_12\"}\r\n                    cell={this.other_2_12}\r\n                    rowSpan={1}\r\n                    colSpan={7}\r\n                    leftMin={70}\r\n                    leftMax={140}\r\n                    cellClass={this.getClassNamesFromCellItemType(\r\n                      ValueType.NUMBERS_2_12,\r\n                      null\r\n                    )}\r\n                    onCellClick={this.onCellClick} topMin={undefined} topMax={undefined}                  />\r\n                  <td></td>\r\n                  <ChipComponent\r\n                    currentItemChips={currentItemChips_3_12}\r\n                    tdKey={\"td_other_3_12\"}\r\n                    chipKey={\"chip_other_3_12\"}\r\n                    cell={this.other_3_12}\r\n                    rowSpan={1}\r\n                    colSpan={7}\r\n                    leftMin={70}\r\n                    leftMax={140}\r\n                    cellClass={this.getClassNamesFromCellItemType(\r\n                      ValueType.NUMBERS_3_12,\r\n                      null\r\n                    )}\r\n                    onCellClick={this.onCellClick} topMin={undefined} topMax={undefined}                  />\r\n                </tr>\r\n                <tr>\r\n                  <td colSpan={2}></td>\r\n                  <ChipComponent\r\n                    currentItemChips={currentItemChips_1_18}\r\n                    tdKey={\"td_other_1_18\"}\r\n                    chipKey={\"chip_other_1_18\"}\r\n                    cell={this.other_1_18}\r\n                    rowSpan={1}\r\n                    colSpan={3}\r\n                    leftMin={30}\r\n                    leftMax={60}\r\n                    cellClass={this.getClassNamesFromCellItemType(\r\n                      ValueType.NUMBERS_1_18,\r\n                      null\r\n                    )}\r\n                    onCellClick={this.onCellClick} topMin={undefined} topMax={undefined}                  />\r\n                  <td></td>\r\n                  <ChipComponent\r\n                    currentItemChips={currentItemChips_even}\r\n                    tdKey={\"td_other_even\"}\r\n                    chipKey={\"chip_other_even\"}\r\n                    cell={this.other_even}\r\n                    rowSpan={1}\r\n                    colSpan={3}\r\n                    leftMin={30}\r\n                    leftMax={60}\r\n                    cellClass={this.getClassNamesFromCellItemType(\r\n                      ValueType.EVEN,\r\n                      null\r\n                    )}\r\n                    onCellClick={this.onCellClick} topMin={undefined} topMax={undefined}                  />\r\n                  <td></td>\r\n                  <ChipComponent\r\n                    currentItemChips={currentItemChips_red}\r\n                    tdKey={\"td_other_red\"}\r\n                    chipKey={\"chip_other_red\"}\r\n                    cell={this.other_red}\r\n                    rowSpan={1}\r\n                    colSpan={3}\r\n                    leftMin={30}\r\n                    leftMax={60}\r\n                    cellClass={this.getClassNamesFromCellItemType(\r\n                      ValueType.RED,\r\n                      null\r\n                    )}\r\n                    onCellClick={this.onCellClick} topMin={undefined} topMax={undefined}                  />\r\n                  <td></td>\r\n                  <ChipComponent\r\n                    currentItemChips={currentItemChips_black}\r\n                    tdKey={\"td_other_black\"}\r\n                    chipKey={\"chip_other_black\"}\r\n                    cell={this.other_black}\r\n                    rowSpan={1}\r\n                    colSpan={3}\r\n                    leftMin={30}\r\n                    leftMax={60}\r\n                    cellClass={this.getClassNamesFromCellItemType(\r\n                      ValueType.BLACK,\r\n                      null\r\n                    )}\r\n                    onCellClick={this.onCellClick} topMin={undefined} topMax={undefined}                  />\r\n                  <td></td>\r\n                  <ChipComponent\r\n                    currentItemChips={currentItemChips_odd}\r\n                    tdKey={\"td_other_odd\"}\r\n                    chipKey={\"chip_other_odd\"}\r\n                    cell={this.other_odd}\r\n                    rowSpan={1}\r\n                    colSpan={3}\r\n                    leftMin={30}\r\n                    leftMax={60}\r\n                    cellClass={this.getClassNamesFromCellItemType(\r\n                      ValueType.ODD,\r\n                      null\r\n                    )}\r\n                    onCellClick={this.onCellClick} topMin={undefined} topMax={undefined}                  />\r\n                  <td></td>\r\n                  <ChipComponent\r\n                    currentItemChips={currentItemChips_19_36}\r\n                    tdKey={\"td_other_19_36\"}\r\n                    chipKey={\"chip_other_19_36\"}\r\n                    cell={this.other_19_36}\r\n                    rowSpan={1}\r\n                    colSpan={3}\r\n                    leftMin={30}\r\n                    leftMax={60}\r\n                    cellClass={this.getClassNamesFromCellItemType(\r\n                      ValueType.NUMBERS_19_36,\r\n                      null\r\n                    )}\r\n                    onCellClick={this.onCellClick} topMin={undefined} topMax={undefined}                  />\r\n                </tr>\r\n                <tr>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                  <td></td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import { LinearProgress } from \"@mui/material\";\r\nimport anime from \"animejs\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { GameStages } from \"./Global\";\r\n\r\nconst ProgressBarRound = ( props : {stage : GameStages, maxDuration: number, currentDuration: number}) : JSX.Element => {\r\n \r\n  useEffect(() => {\r\n    console.log(\"stage : \" + props.stage)\r\n    console.log(\"maxDuration : \" + props.maxDuration)\r\n    console.log(\"currentDuration : \" + props.currentDuration)\r\n    var duration = (props.maxDuration-props.currentDuration)*1000\r\n    console.log(duration);\r\n    anime({\r\n      targets: 'progress',\r\n      value: [0,100],\r\n      easing: 'linear',\r\n      autoplay: true,\r\n      duration: duration\r\n    })\r\n    \r\n  }, [props.stage, props.maxDuration, props.currentDuration]);\r\n  return (\r\n    <div>\r\n      <div className=\"progressRoundTitle\">\r\n      {\r\n        (props.stage === GameStages.PLACE_BET) ? \"PLACE BET\" \r\n        : (props.stage === GameStages.WINNERS)  ? \" WINNERS\"\r\n        : \"NO MORE BETS\"\r\n      }\r\n      </div>\r\n      <progress className={\"linearProgressRounds\"} value=\"0\" max=\"100\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProgressBarRound;\r\n","import React from \"react\";\r\nimport Wheel from \"./Wheel\";\r\nimport Board from \"./Board\";\r\nimport { List, Button, Progress } from '@mantine/core';\r\nimport { Item, PlacedChip, RouletteWrapperState, GameData, GameStages } from \"./Global\";\r\nimport { Timer } from \"easytimer.js\";\r\nimport WebApp from '@twa-dev/sdk';\r\nimport classNames from \"classnames\";\r\nimport { io } from \"socket.io-client\";\r\nimport anime from \"animejs\";\r\nimport ProgressBarRound from \"./ProgressBar\";\r\n\r\nclass RouletteWrapper extends React.Component<any, any> {\r\n  rouletteWheelNumbers = [ \r\n    0, 32, 15, 19, 4, 21, 2, 25,\r\n    17, 34, 6, 27, 13, 36, 11,\r\n    30, 8, 23,10, 5, 24, 16, 33,\r\n    1, 20, 14, 31, 9, 22, 18, 29,\r\n    7, 28, 12, 35, 3, 26\r\n  ];\r\n\r\n  timer = new Timer();\r\n  numberRef = React.createRef<HTMLInputElement>();\r\n  state: RouletteWrapperState = {\r\n    rouletteData: {\r\n      numbers: this.rouletteWheelNumbers\r\n    },\r\n    chipsData: {\r\n      selectedChip: null,\r\n      placedChips: new Map()\r\n    },\r\n    number: {\r\n      next: null\r\n    },\r\n    winners: [],\r\n    history: [],\r\n    stage: GameStages.NONE,\r\n    username: WebApp.initDataUnsafe.user?.username || \"Guest\",\r\n    endTime: 0,\r\n    progressCountdown: 0,\r\n    time_remaining: 0,\r\n  };\r\n  socketServer: any;\r\n  animateProgress: any;\r\n\r\n  blackNumbers = [ 2, 4, 6, 8, 10, 11, 13, 15, 17, 20, 22, 24, 26, 29, 28, 31, 33, 35 ];\r\n  \r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.onSpinClick = this.onSpinClick.bind(this);\r\n    this.onChipClick = this.onChipClick.bind(this);\r\n    this.getChipClasses = this.getChipClasses.bind(this);\r\n    this.onCellClick = this.onCellClick.bind(this);\r\n    this.placeBet = this.placeBet.bind(this);\r\n    this.clearBet = this.clearBet.bind(this);\r\n\r\n    // Usar la URL del servidor desde las variables de entorno\r\n    this.socketServer = io(process.env.REACT_APP_SERVER_URL || \"http://localhost:8000\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.socketServer.open();\r\n    this.socketServer.on('stage-change', (data: string) => {\r\n      const gameData: GameData = JSON.parse(data);\r\n      this.setGameData(gameData);      \r\n    });\r\n\r\n    this.socketServer.on(\"connect\", () => {\r\n      this.socketServer.emit(\"enter\", this.state.username);\r\n      \r\n      // Notificar a Telegram que la app está lista\r\n      WebApp.ready();\r\n      \r\n      // Configurar el tema según Telegram\r\n      document.body.style.backgroundColor = WebApp.backgroundColor;\r\n      document.body.classList.add(WebApp.colorScheme);\r\n    });\r\n\r\n    // Expandir la webapp a pantalla completa\r\n    WebApp.expand();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.socketServer.close();\r\n  }\r\n\r\n  setGameData(gameData: GameData) { \r\n    if (gameData.stage === GameStages.NO_MORE_BETS) { // PLACE BET from 25 to 35\r\n      var endTime = 35;\r\n      var nextNumber = gameData.value\r\n      this.setState({ endTime: endTime, progressCountdown: endTime - gameData.time_remaining, number: { next: nextNumber }, stage: gameData.stage, time_remaining: gameData.time_remaining}); \r\n    } else if (gameData.stage === GameStages.WINNERS) { // PLACE BET from 35 to 59\r\n      var endTime = 59;\r\n      if (gameData.wins.length > 0) {\r\n        this.setState({ endTime: endTime, progressCountdown: endTime - gameData.time_remaining,winners: gameData.wins,stage: gameData.stage, time_remaining: gameData.time_remaining, history: gameData.history }); \r\n      } else {\r\n        this.setState({ endTime: endTime, progressCountdown: endTime - gameData.time_remaining, stage: gameData.stage, time_remaining: gameData.time_remaining, history: gameData.history }); \r\n     }\r\n    } else { // PLACE BET from 0 to 25\r\n      var endTime = 25;\r\n      this.setState({endTime: endTime, progressCountdown: endTime - gameData.time_remaining, stage: gameData.stage , time_remaining: gameData.time_remaining}); \r\n    }\r\n  }\r\n\r\n  onCellClick(item: Item) {\r\n    var currentChips = this.state.chipsData.placedChips;\r\n\r\n    var chipValue = this.state.chipsData.selectedChip;\r\n    if (chipValue === 0 || chipValue === null) {\r\n      return;\r\n    }\r\n    const currentChip: PlacedChip = {\r\n      item: item,\r\n      sum: chipValue\r\n    };\r\n\r\n    console.log(this.state.chipsData.placedChips);\r\n    console.log(item);\r\n    if (currentChips.get(item) !== undefined) {\r\n      currentChip.sum += currentChips.get(item).sum;\r\n    }\r\n\r\n    currentChips.set(item, currentChip);\r\n    this.setState({\r\n      chipsData: {\r\n        selectedChip: this.state.chipsData.selectedChip,\r\n        placedChips: currentChips\r\n      }\r\n    });\r\n  }\r\n\r\n  onChipClick(chip: number | null) {\r\n    if (chip != null) {\r\n      this.setState({\r\n        chipsData: {\r\n          selectedChip: chip,\r\n          placedChips: this.state.chipsData.placedChips\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  getChipClasses(chip: number) {\r\n    var cellClass = classNames({\r\n      chip_selected: chip === this.state.chipsData.selectedChip,\r\n      \"chip-100\": chip === 100,\r\n      \"chip-20\": chip === 20,\r\n      \"chip-10\": chip === 10,\r\n      \"chip-5\": chip === 5\r\n    });\r\n\r\n    return cellClass;\r\n  }\r\n\r\n  onSpinClick() {\r\n    const nextNumber = this.numberRef?.current?.value;\r\n    if (nextNumber) {\r\n      this.setState({ number: { next: nextNumber } });\r\n    }\r\n  }\r\n\r\n  placeBet() { \r\n    const placedChipsMap = this.state.chipsData.placedChips;\r\n    const chips: PlacedChip[] = [];\r\n    \r\n    for(const key of Array.from(placedChipsMap.keys())) {\r\n      const chipsPlaced = placedChipsMap.get(key);\r\n      if (chipsPlaced) {\r\n        console.log(\"place chips\");\r\n        console.log(chips);\r\n        console.log(chipsPlaced);\r\n        console.log(chips.length);\r\n        chips.push(chipsPlaced);\r\n      }\r\n    }\r\n    this.socketServer.emit(\"place-bet\", JSON.stringify(chips));\r\n  }\r\n\r\n  clearBet() { \r\n    this.setState({\r\n      chipsData: {\r\n        placedChips: new Map()\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <table className={\"rouletteWheelWrapper\"}>\r\n            <tr>\r\n            <td className={\"winnersBoard\"}>\r\n            <div className={\"winnerItemHeader hideElementsTest\"} >WINNERS</div>\r\n              { \r\n                this.state.winners.map((entry, index) => {\r\n                    return (<div className=\"winnerItem\">{index+1}. {entry.username} won {entry.sum}$</div>);\r\n                })\r\n              }\r\n            </td>\r\n            <td><Wheel rouletteData={this.state.rouletteData} number={this.state.number} /></td>\r\n            <td>\r\n              <div className={\"winnerHistory hideElementsTest\"}>\r\n              { \r\n                this.state.history.map((entry, index) => {\r\n                  if (entry === 0) {\r\n                    return (<div className=\"green\">{entry}</div>);\r\n                  } else if (this.blackNumbers.includes(entry)) {\r\n                    return (<div className=\"black\">{entry}</div>);\r\n                  } else {\r\n                    return (<div className=\"red\">{entry}</div>);\r\n                  }\r\n                })\r\n              }\r\n              </div>\r\n            </td>\r\n              \r\n            </tr>\r\n          </table>\r\n          <Board\r\n            onCellClick={this.onCellClick}\r\n            chipsData={this.state.chipsData}\r\n            rouletteData={this.state.rouletteData}\r\n          />\r\n        </div>\r\n        <div className={\"progressBar hideElementsTest\"}>\r\n          <ProgressBarRound stage={this.state.stage} maxDuration={this.state.endTime} currentDuration={this.state.time_remaining} />\r\n        </div>\r\n        <div className=\"roulette-actions hideElementsTest\">\r\n          <ul>\r\n            <li>\r\n            <Button  variant=\"gradient\" gradient={{ from: '#ed6ea0', to: '#ec8c69', deg: 35 }} size=\"xl\" onClick={() => this.clearBet()} >Clear Bet</Button>\r\n            </li>\r\n            <li className={\"board-chip\"}>\r\n              <div\r\n                key={\"chip_100\"}\r\n                className={this.getChipClasses(100)}\r\n                onClick={() => this.onChipClick(100)}\r\n              >\r\n                100\r\n              </div>\r\n            </li>\r\n            <li className={\"board-chip\"}>\r\n              <span key={\"chip_20\"}>\r\n                <div\r\n                  className={this.getChipClasses(20)}\r\n                  onClick={() => this.onChipClick(20)}\r\n                >\r\n                  20\r\n                </div>\r\n              </span>\r\n            </li>\r\n            <li className={\"board-chip\"}>\r\n              <span key={\"chip_10\"}>\r\n                <div\r\n                  className={this.getChipClasses(10)}\r\n                  onClick={() => this.onChipClick(10)}\r\n                >\r\n                  10\r\n                </div>\r\n              </span>\r\n            </li>\r\n            <li className={\"board-chip\"}>\r\n              <span key={\"chip_5\"}>\r\n                <div\r\n                  className={this.getChipClasses(5)}\r\n                  onClick={() => this.onChipClick(5)}\r\n                >\r\n                  5\r\n                </div>\r\n              </span>\r\n            </li>\r\n            <li>\r\n            <Button disabled={this.state.stage === GameStages.PLACE_BET ? false : true}\r\n            variant=\"gradient\" gradient={{ from: 'orange', to: 'red' }} size=\"xl\" onClick={() => this.placeBet()} >Place Bet</Button>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RouletteWrapper;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport WebApp from '@twa-dev/sdk';\r\nimport RouletteWrapper from './RouletteWrapper';\r\nimport './styles.css';\r\n\r\n// Inicializar la Web App de Telegram\r\nWebApp.ready();\r\n\r\n// Configurar el tema y el color de fondo según Telegram\r\ndocument.body.style.backgroundColor = WebApp.backgroundColor;\r\ndocument.body.classList.add(WebApp.colorScheme);\r\n\r\n// Expandir la webapp a pantalla completa\r\nWebApp.expand();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RouletteWrapper />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}